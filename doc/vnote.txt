*vnote.txt*		Notes and Diary Manager in Vim

version 0.51
Author: lymslive <403708621@qq.com>
License: MIT license

========================================================+=====================
CONTENTS						*vnote*

1. Introduction						|vnote-introduction|
2. Install						|vnote-install|
3. Usage						|vnote-usage|
4. Interface						|vnote-interface|
  4.1 Global Commands					|vnote-command|
  4.2 Operate on notelist				|vnote-notelist|
  4.3 Operate on notebuff				|vnote-notebuff|
      markdown for note					|markdown-note|
      markdown for text					|markdown-edit|
  4.4 Global Sharp Function				|vnote-function|
  4.5 Class Remark					|vnote-class|
5. Custom						|vnote-custom|
  5.1 Config variable					|vnote-config|
  5.2 Local remap schema				|vnote-remap|
6. Vnote command line tool				|vnote-tool|
7. FAQ							|vnote-faq|
8. Credit						|vnote-credit|

========================================================+=====================
1. Introduction						*vnote-introduction*

A note or diary is no more a plain text file. But it's much better to use 
markdown as the base 'filetype' of note file. A notebook is a directory that
organize bundle of note files in some pretty way.

This |vnote| plugin is aimed to manage note files in vim environment, as long
as the fairy edit ability. It will gather some information from note file,
and so require a few format assumptions:

*vnote-title* is the first line of note file, but the leading "#" symbol is
trimed, as it maybe just markdown title syntax.

*vnote-tag* is the word quoted with `` symbol, in the first few lines of 
note file. `tag` must start from the first column, multiply tags can be
in one line, each quoted with ``. The tag line must be continous, usually
from the second line next to title, but not necessary so.

|vnote| by default only search the first ten line to parse note tags. Complex
tags with path such as `topic/sub-topic` is also handled. The tag should be
meaningful word, not containing strange characters.

*vnote-notebook* is a directory that all note files are stored in it's "d/"
subdirectory, and further organized by date "yyyy/mm/dd". 

*vnote-notefile* is an individual note file, also named by date with an addtion
sequel number, as the form "yyyymmdd_n.md". "n" is note number of that day, from
1, 2, 3...

*vnote-private* is a property of note or diary. We can say note is public, but
diary is private. The private diary file has a minus symbol "-" suffix after
the ordinary note file name, as the form "yyyymmdd_n-.md". The private diary 
and public note share the same number serials.

So the full path of a note file is something like>
	{notebook}/d/yyyy/mm/dd/yyyymmdd_n.md
	{notebook}/d/yyyy/mm/dd/yyyymmdd_n-.md
<

*vnote-tagfile* or index file, which stored in the "t/" subdirectory of
notebook and has the extention ".tag", is another type of formated text file,
that each line denotes a note entry, with two fields separated by a table
character "\t": containing the note file name without ".md" extention, 
and it's corresponding title.

|vnote| will generate tagfiles automatically, and make use of them to list or
browse note by a specific note tag. The complex pathed note tag residents in
further subdirectory of "t/". For example, the `topic/sub-topic` tag is
corresponding to "t/topic/sub-topic.tag" index file, and the `topic` tag is
to "t/topic.tag" index file. When generate tagfiles, perform as 
case insensitive.

*vnote-bookmark* Manually created tagfile is also supported, saved in "m/"
subdirectory. It may some like bookmark. The note file itself donnot need to
contain this tag quoted in ``. A special bookmark tagfile named "mru" is
automatically creatd though, it save the "most recent used" notes.

*vnote-cache* The overall index file is cacheed in "c/" subdirectory. It is
automatically and increasementally saved, in four cache levels:
day-month-year-hist, which the last level is short for "history". These cache
files have ".che" extention, but the format is actuallly the save as tagfile.

A custom command |:NoteIndex| is available to manually rebuild cache file, it
creates all note index in "hist.che" and delete the other cache files.  Then
from that moment, any new note index is added in "day.che", and push up to
"month.che", "year.che" at appropriate time. This rebuild command may
time-consuming for large notebook, however at most time, it can rely on the
auto-cache schema.

========================================================+=====================
2. Install						*vnote-install*

Requirement:

Minimum Vim Verion: 7.4
Operating System: linux (not test in windows by now)
(optional) Unite.vim plugin

|vnote| depends on |vimloo|, another common utility plugin for writing VimL
script in the so called OOP(Object Orient Programming) manner. A manual way
to install these two plugin maybe something like: >
	$ git clone https://github.com/lymslive/vimloo.git
	$ git clone https://github.com/lymslive/vnote.git
	: set rtp+=right/path/to/vimloo
	: set rtp+=right/path/to/vnote
<

The "$" symbol denotes as shell command, and ":" denotes as vim's ex command,
usually in your vimrc file. If you perfer to some plugin manage tool, just do
that way to install |vnote| and |vimloo|.

========================================================+=====================
3. Usage						*vnote-usage*

When |vnote| plugin is loaded, it assumes the default notebook in "~/notebook"
directory. 

Use |:NoteBook| command to change notebook directory if necessary.
Use |:NoteNew| command to edit a new note file, named automatically.
When save the note by |:w| the tagfiles is also automatically update.
Use |:NoteEidt| open the last note of today, or by arguments.
Use |:NoteList| to list the note of today, or by arguments.

If the |Unite.vim| plugin is installed and loaded, then notelist source is 
available. Use "Unite notelist" or "Unite notelsit:arguments:to:notelist"
to start Unite for current notebook. The arguments is the same as |:NoteList|
command, but separated by ":" symbol. When no arguments provided, it behaviors
differently from |:NoteList|, Unite will gather all note files (not only today)
as candidates.

Because note is just markdown file, and notebook is just directory with plain
text files, any other common tools for text is also available for notebook.
It is easy to work together with other markdown plugin, text search/grep plugin
and so on. Of course, there may be need to pay attention to key map conficts.

The notebook directory is also suited to push as a git repository. Usually,
only the "d/" subdirectory is needed to submit. And the private diary is also
better to exclude. All this rule can be meet by editing the ".gitignore" file,
example as following: >
	t/
	c/
	m/
	*-.md
<
The sub-directory "t/, d/, m/" may NOT exclued if using pure |vnote| VimL
plugin, as rebuild index may be time-consuming, when notebook grows large.

========================================================+=====================
4. Interface						*vnote-interface*

|vnote| is mainly working on two context, when editing note, which 'filetype'
is "markdown", and when listing note, which 'filetype' is "notelist". In each
case, have different key mappings, and few buffer local command. Inaddition to
these, several global command are provided that can trigger from any time.

Most implement script is in "autoload/" subdirectory. The global commands is
defined in script in "plugin/" subdirectory, buffer local mappings or commands
is defined in scrip in "ftplugin/" subdirectory. The virtual <Plug> mappings
are defined in script "autoload/vnote/remap.vim".

--------------------------------------------------------+---------------------
4.1 Global Commands					*vnote-command*

:NoteBook [{directory}]					*:NoteBook*
	Change the current notebook to the one in {directory}. If omits the
	argument, show the current notebook directory.

:NoteNew [-] [-t {tag} ...] [-T {title}]		*:NoteNew*
	Create a new note, within today's subdirectory, and increase the note
	number by one. The directory will be make automatically if necessary.
	If provides a dash "-" as argument, add dash to the note file name,
	that label as a private diary.
	When provides "-t" option, the next words are treated as note tag,
	the tag arguments should not quote with ``, and after this command
	executes successfully, these tags will be quoted and inserted into
	the newly created note.
	When provides "-T" option, the next words are joined as title 
	sentence, and insert to the newly created note.
	If has not "-t" nor "-T" option, but any words arguments are provided,
	they are treated as tags.
	If there are any words arguments before "-t" or "-T" option, then these
	words are treated as after the other option.
	If the "-t" and "-T" option are both provided, and still have any
	words before the option, then these arguments are just ignored.

:NoteEidt [{date}|{number}]				*:NoteEdit*
	Edit the last note of {date}, {date} argument is in path format
	"yyyy/mm/dd".  The last note is the one with largest note number.
	If the argument is a nunber, it denotes the index of "mru" list, in
	which "-1" is the last accessed note.
	If no argument, "-1" by default.

:NoteList [-r] [-svn] [-adtmDTM] [{args}]		*:NoteList*
	The default :NoteList command with no arguments open a notelist buffer
	to list all the note of today.
	The allowed arguments can be understand by three groups.
	"-r" is resume, open the last ontelist buffer.
	"-svn" is say where to open the notelist buffer, 
	only one of these can be provided:
		default: open in current window
		-s: slipt window and open the notelist buffer
		-v: vertical split window and open notelist
		-n: tabnew, open a new tabpage for notelist.
	NOTE: if there is a notelist window existed already, the "-svn" option
	is ignored, always reuse the notelist window.
	"-adtmDTM" option denote the list mode.
		-a list all the note in current notebook
		-d [{date}] list note of that day, default today
		-t {tag} list note of that tag
		-m {tag} list note of that bookmark, default "mru"
		-D [{date}] browse date subdirectory, list date has any note
		-T [{tag}] browse tag subdirectory, list tags instead of note
		-M [{tag}] browse bookmark subdirectory.

:NoteConfig [{key} {val}]				*:NoteConfig*
	When no argument, display the current config directory. otherwise,
	pairs of arguments must be provided, the first is key, and the second
	is value to be set. The vaild config key can be queried by this command
	without argument, see also |vnote-config|
	For example, to show all the current config value: >
		:NoteConfig
<
	to change the value of 'note_file_max_tags': >
		:NoteConfig note_file_max_tags 7
<
:NoteIndex [-t]						*:NoteIndex*
	Rebuild index for overall notebook, save the result in "c/hist.che",
	delete the minor level cache files "day.che, month.che, year.che".
	If "-t" option is on, also rebuild all tagfiles in "t/" sub-
	directory, the already existed tagfiles is overwritten but not 
	deleted.
	There is seldom need to use this command if you only hand write note
	locally, since when new note saved, update the cache files and 
	tag files automatically.

:NoteImport [-pPsS]						*:NoteImport*
	When edit a text file that is not in current notebook, this command
	will |:saveas| current buffer to the notebook, automatically named as
	|:NoteNew|. If the extention of current buffer is not ".md" or ".txt"
	a |input()| promt to confirm import.
	Support three options that denotes three import types:
	-p: the default copy-import
	    add bookmark to {copyin}
	-P: move origin file to notedir
	    add bookmark to {copyin}
	-s: make new note symbol link to current file, only in unix
	    add bookmark {linkin}
	-S: make soft note, with title line "# !/path/to/current/file"
	    add bookmark to {softin}
	Soft note is normal note, only with special title, and when cursor on
	the title line, can use |gf| to open the origin file.
	|vnote| cannot track the symbol link or soft note when the origin
	file has been moved or renamed.

:Unite notelist:{-dtm}:{arg}
	The |:Unite| source "notelist" is available, the argument is the same
	as the |:NoteList| command. But the default behavior with no argument
	is as "-a" argument, that gather all notes.
	The argument to unite source is separated by ":".

--------------------------------------------------------+---------------------
4.2 Operate on notelist					*vnote-notelist*

The special notelist buffer is mainly created by command |:NoteList|.
There are three head lines:
	First line is ": NoteBook {notebook full directory}"
	Second line is ": NoteList {arguments to notelist}"
	Third line is a dummy separator line
	The left lines is the actual list content, and maybe empty.

There are tow main groups of modes for notelist. The "lower-case" option
(-amtd) denotes list mode, and the "upper-case" option(-MTD) denotes browse
mode. In the normal list mode, each entry line has the format as in tag file:
	{note-name} <Tab> {note-title}
>

The notelist buffer in non-modifiable, many keys in normal mode has been 
remaped to do some smart things. In the following key map list, the left is
the default key maped, and the right is the virtual <plug> mapping name.
There may be more than one key to map the same <plug> mapping name, then the 
keys are all listed and separated by a space character.

Most key maps are only available when the cursor is on the list entry,
but disable on the headline.

<CR> i					*<Plug>(VNOTE_list_edit_note)*
	When list by "-d" or "-t" mode, open the note denoted by the entry
	line. If have multiply windows now, the note is opened in another
	window, prefered an existed "markdown" window. Otherwise, use the
	current only window and the notelist buffer is hidden.
	When list by "-D" or "-T" mode, the list content is date or tag
	but note entry, then "enter" that date or tag.

<Tab> 					*<Plug>(VNOTE_list_smart_tab)*
	When there is only one window now, first executes |:vsplit|, and
	then perfer as |<Plug>(VNOTE_list_edit_note)| to open note.
	When there are already more windows, just jump to another window.

<BS> a					*<Plug>(VNOTE_list_back_list)*
	Back to a level up list.
	For example: now list by ":Notelist -d yyyy/mm/dd", back to
	"NoteList -D yyyy/mm", and further back to ":NoteList -D yyyy".
	Something alike when list by "-t" and "-T".

<Space> o 				*<Plug>(VNOTE_list_smart_space)*
	When use in list mode by "-[dmt]" argument, and cursor on a
	note entry. This map will open a line next to current note entry,
	and show the tags of that note in the line. If a tagline is already
	show, this map hide it again.
	When use in browse mode by "-[MT]" argument, and cursor on a tag
	entry(not tag path), open the tagfile to edit manually. Be careful the
	format of tagfile, it will also promt first. It is only suggested to
	delete some note entry, or change the note title.

<Right> <C-a>				*<Plug>(VNOTE_list_next_day)*
<Left> <C-x>				*<Plug>(VNOTE_list_prev_day)*
<Down> 					*<Plug>(VNOTE_list_next_month)*
<Up> 					*<Plug>(VNOTE_list_prev_month)*
	These arrow maps is used only in ":NoteList -d" mode, travelling
	the day or month one by one, even the date that has not written
	any note is no skipped.

T 					*<Plug>(VNOTE_list_browse_tag)*
	Switch to ":NoteList -T" list mode.
D 					*<Plug>(VNOTE_list_browse_date)*
	Switch to ":NoteList -D" list mode.
M 					*<Plug>(VNOTE_list_browse_mark)*
	Switch to ":NoteList -M" list mode.

t 					*<Plug>(VNOTE_list_smart_jump)*
	Switch to list by another tag, if the tagline is show and cursor
	is on some tag. Otherwise switch to list by the date of current
	note entry under cursor.

p 					*<Plug>(VNOTE_list_pick_tag)*
	Can only use in "-T" or "-t" list mode. Yank the current selected
	tag to the unnamed register, and if there is another note window
	opened, add the tag to that note buffer.

u 					*<Plug>(VNOTE_list_switch_unite)*
	Switch to unite search mode, gather the candidate from current
	notelist buffer content. Only can be used when |:Unite| command
	is available.
gg 					*<Plug>(VNOTE_list_goto_first)*
	Goto the first entry line, or if already in the first entry line,
	goto the first headline.

C			nnoremap <buffer> <expr> C notelist#hRefineArg()
	Copy the |:NoteList| arguments to command line, and let user to modify
	the arguments and rerun.
	This map should use the special |:map-<expr>| argument.


<C-x>t			cnoremap <buffer> <C-x>t <C-R>=note#GetContext()<CR>
	Key map when edit command line, copy the tag name or note name under
	current cursor to command line.

dd 					*<Plug>(VNOTE_list_delete_this)*
	Delete the note or tag under cursor, behaves differently by list mode:
	-d: delete one note file, prompt to confirm.
	-D: delete all notes under the date directory, prompt to confirm.
	    Only delete note file(s), cannot update tag file and cache, may
	    leave some invalid entry then.
	-t: delete one entry from the tag file, silently.
	    Mainly use to delete invalid entry.
	-T: Completely delete a tag file, and update the note file(s) having
	    this tag before. Prompt to confirm.
	-m: Delete one entry from the bookmark tag file, silently.
	-M: Delete a bookmark tag file, prompt to confirm.
	    There is no need to update note file when delete bookmark.
	 When the delete operation success, refresh the notelist window.

<C-x>R				:NoteTag -r <C-R>=note#GetContext()<CR>
	Rename a tag file. Only used in "-T" browse mode. All the notes that
	have the old tag is also update.
	This map actuallly input |:NoteTag| command with "-r" option, copy the
	tag name under cursor to command line, wait user input new tag name
	and <CR> to confirm.
	Rename, as delete and other operaton on bookmark is relative simple,
	just use shell command in "{notebook}/m" sub-directory is OK.

--------------------------------------------------------+---------------------
4.3 Operate on notebuff					*vnote-notebuff*

The note buffer has set 'filetype' "markdown", so the local mappings are 
deified in script "ftplugin/markdow*.vim". They can be divined into two groups
by purpose, one is relate to notebook or notelist, and one relate to editing
markdown file as any other markdown plugin.

markdown mappings for note~				*markdown-note*

g<C-a>					*<Plug>(VNOTE_edit_next_note)*
g<C-x>					*<Plug>(VNOTE_edit_prev_note)*
	Edit the next/previous number of note at the same day.

<C-]>					*<Plug>(VNOTE_edit_open_list)*
	Jump to open notelist buffer. If cursor on tagline, list by that
	tag, otherwise list by the date of current note.
	If there is existed notelist window, reuse that window.

<Tab>					*<Plug>(VNOTE_edit_smart_tab)*
	If there is only one window, do as |<Plug>(VNOTE_edit_open_list)| but
	|:vsplit| window first. Otherwise, jump to another window, prefer to
	notelist window.

:NoteTag [-d] {tag}					*:NoteTag*
	Add tag to current note. If "-d" option, remove that tag.
	It is not necessary to use this command to add tag, directly input
	text in note buffer is also OK, and when the note file is written,
	the tagfile is automatically updated. However, use this command can
	complete tag in command line.
	Use ":NoteTag -d" to remove tag has advantage to update tagfile, while
	directly delete tag text in buffer, will not update tagfile.
:NoteTag {-drm} {tag} [another-tag]
	|:NoteTag| is buffer localed command, it has different definiation
	on notebuff and notelist context. When executed at notelist window,
	it manage the tag over the notebook:
	{-d} delete a tag file
	{-r} rename a tag file, requres a new tag name
	{-m} merge tow tag file, the second tag file is delete
	When this command executes, each notefile that originally contains the
	modified tag are also updated.

:NoteMark [{tag}]					*:NoteMark*
	Add current notefile to bookmark. If no argument provided, add to the
	default bookmark named in "m/defualt.tag".
	The "mru" bookmark name is reserved, and should not use.

:NoteSave [{force}]					*:NoteSave*
:NoteSave [-yesterday]
	Update note cache and tag file with current note buffer. There is no
	need to use this command normally, since the work is done
	automatically when |:w|. It is useful in the following cases:
	1. when note title is changed, the note entry in tag file and cache
	   cannot update. Manually give {force} arugment, which is non-empty
	   will force to update the existed note entry.
	2. When create new note just befor zero time, but save the note first
	   time after zero time, then the auto-cache may have problem. Give
	   argument [-yesterday] or [-y] force to update cache.

markdown mappings for text~				*markdown-edit*

:TODO [{progress}] [{item}]				*vnote-TODO*
	Add a todo item, or update the progress of todo item.
	Local command to note buffer, or markdown filetype.
	There are three symbols to mark unorder list in markdown. |vnote| use
	these three symbols to denote differen status of a todo item:
		- [todo] a todo item
		* [todo:xx%] a doing item, xx% is the progress from 1% to 99%
		+ [todo] a done item, that progress 100%.
	If cursor on a normal line, ":TODO {item}" add a new todo item.
	If cursor on a line has a todo item, ":TODO {progress}" update the
	progress, which marked as done when greater or equal to 100.

todo:
-t			abbreviate <buffer> <expr> -t edit#markdown#hTodo_i()
	"-t" or "todo:" is abbreviate in insert mode, to insert a todo
	notation quickly. It do somethin like "<ESC>:TODO<CR>".

<CR>		nnoremap <buffer> <expr> <CR> edit#markdown#hEnterExpr()
	When cursor on a line with todo item, press <CR> goto command line
	and input ":TODO " command, waiting for further arugment. It is a
	quick way to use |vnote-TODO| command.
	Otherwise, goto command line and input ":Note", with no space, then
	press <Tab> can complete commands provided by |vnote|, which all start
	with ":Note".

i_<CR>		inoremap <buffer> <expr> <CR> edit#markdown#hEnterExpr_i()
	This is the map to handle <CR> in insert mode.
	When in a line with todo item, also add a new todo item in next line.
	When in a line with normal unorder list, add a new unorder list.
	When in a line with ordered list, add a new list, and make order +1.
	Otherwise, perform as normal <CR>

--------------------------------------------------------+---------------------
4.4 Global Sharp Function				*vnote-function*

In this section, briefly list the global sharp function that can be called
directlly from command line or from other script, to custom map or/and command
for example.

vnote#GetNoteBook()
	Get the notebook class object, denotes the current notebook.

vnote#GetConfig(...)
	Get the current config dictionay. If has argument, it excepts key, and
	return the value of that key.

vnote#hNoteConfig(...)
	Handle of command |:NoteConfig|.

notebook#OpenNoteBook(...)
	Open another notebook, or show current notebook if no arugent.
	see also |:NoteBook|

notebook#hNoteNew(...)
notebook#hNoteEdit(...)
notebook#hNoteIndex(...)
notebook#hNoteImport()
	Handle of the relative command. See also |vnote-command|.

notelist#hNoteList(...)
	Handle of command |:NoteList|, the entrance function for that command.
notelist#hBackList()
	Goto the parent level at browse notelist mode.
notelist#hEnterNote()
	Handle the <CR> key map at notelist windown.
notelist#ToggleTagLine()
	Toggle the taglie when at normal notelist mode.
notelist#hSmartTab()
	Handle the <Tab> key map at notelist windown.
notelist#NextDay(shift)
notelist#NextMonth(shift)
	List the notes of next day or next month, the {a:shift} argument can
	be negative number, that is previous day or month.
notelist#hSmartJump()
	Swith to notelist with other argument, with context under cursor.
notelist#hRefineArg()
	Copy the |:NoteList| argument to command line.
notelist#hPasteTag()
	Paste the tag under cursor to the notebuff opened in another window.
	If no notebuff is opened, yank the tag name.
notelist#hManageTag(...)
	Handle function to manage tag over notebook, that buffer command
	|:NoteTag| works.
notelist#hGotoFirstEntry()
	Goto the first entry line, or the first head line.

note#IsInBook()
	Check if currnet notebuff is in current notebook.
note#EditNext(shift)
	Open the next/prev note of the same day, argument can be negative.
note#OpenNoteList()
	Opeon notelist by the tag argument under cursor or the date.
note#hSmartTab()
	Handle the <Tab> key map, switch window or open ontelist windown.
note#DetectTag(bol)
	Check if the cursor on a quoted tag, return the tag if so.
	Argument {bol} says if the tag must appear in the beginning of line.
note#OnSaveNote(...)
	Handle the buffer write event.
note#OnBufRead()
	Handle the buffer read event.
note#hNoteTag(...)
	Handle the command |:NoteTag|, add or delete tag from current notebuff.
note#hNoteMark(...)
	Handle the command |:NoteMark|, add current notebuff to bookmark.
note#GetContext()
	Get the first word of current line.

--------------------------------------------------------+---------------------
4.5 Class Remark					*vnote-class*

The implement of this plugin follow the OOP style of |vimloo|. This section
decribes the basic class design remark, for further devoloping not for common
user.

class#notebook
	Denotes a notebook object. The most common thing is to save the
	directory of notebook in the {basedir} member key.
	The complex member key {cache_} and {mru_} is only created when really
	need, or the first time used.
	The current notebook object can be accessed by vnote#GetNoteBook().

class#note
class#notefile
class#notebuff
	They denote note object. The class#note is base class, with the other
	two sub-classes. class#notebull is a note that loaded in a vim buffer,
	while class#notefile may not.
	There is a variable {b:jNoteBuff} of class#notebuff for each 
	opened note.

class#notename
	The name of a note file contains many information, in the form of
	"yyyymmdd_n" or "yyyymmdd_n-". So create a class to deal with such
	file name.

class#notelist
	Manage the notelist buffer. Parse the argument passed to command
	|:NoteList|, gather the list content and fresh the buffer content.
	The objcet variable {b:jNoteList} is saved with notelist buffer.

class#notescope
class#notescope#date
class#notescope#daterange
class#notescope#tag
	class#notescop is for a subset of notes in the notebook, and there
	are several sub-classes for different subset.
	class#notescope#date is for ":NoteList -d"
	class#notescope#tag is for ":NoteList -t" and ":NoteList -m"
	class#notescope#daterange if for notes between two dates.

class#notebrowse
class#notebrowse#date
class#notebrowse#tag
	These class is for browse mode of notelist. As usually, the longer
	named class is the sub-class of the shortor one.
	class#notebrowse#date is or ":NoteList -D"
	class#notebrowse#tag is or ":NoteList -T" and ":NoteList -M"

class#notefilter
class#notefilter#private
class#notefilter#public
class#notefilter#daterange
	class#notefilter is some like class#notescope, it is mainly used for
	further filter the notes subset. "notefilter" may extend more flexible
	than "notescope", as it is relative to abstract condition.

class#notetag
class#notetag#mark
class#notetag#mru
	class#notetag denotes a tag file in "t/" sub-directory.
	class#notetag#mark denotes a bookmark tagfile in "m/" sub-directory.
	class#notetag#mru denotes the special "mur" list, which is also saved
	at "m/mur.tag".

class#notecache
class#notecache#day
class#notecache#month
class#notecache#year
class#notecache#hist
	Implement the four level cache schema.
	The new note index entry is added to "day.che", when a day is past,
	the content in "day.che" is append to "month.che", when a month is
	past, the content in "month.che" is append to "year.che".
	The "hist.che" is the top level cache. The command |:NoteIndex|
	directlly write to "hist.che", and delete the other three minor cache
	files to avoid duplicated index entry.

========================================================+=====================
5. Custom						*vnote-custom*

g:vnote_default_notebook = '~/notebook'
	This variable should set in vimrc, before |vnote| plugin loading, or
	at latest before the first time to use this plugin.
	In windows, it's required to manually set this variable.
	It's also better to mkdir the default notebook first, may avoid some
	noising message.

5.1 Config variable					*vnote-config*

Most configurable variable is saved in a dictionay, that can be query and set
by commend |NoteConfig|. The variable and meaning are list below, with default
value after each.

note_file_head_line = 10
	How many line are parsed at most to gather tag information of a note.
	Valid value is between [2, 20]

note_file_max_tags = 5
	How many tag are supported at most. If there are too many tags in a 
	note buffer, the ones exceeds this limit will not auto saved.
	For performance purpose, avoid to update too many tagfiles.
	Valid vaue is between [2, 10]

auto_add_minus_tag = v:true
auto_add_plus_tag = v:true
	When new note is created by |NoteNew|, whether to insert `-` or `+`
	tag automatically. `-` is for private diary, `+` is for public note.

auto_save_minus_tag = v:false
auto_save_plus_tag = v:false
	When note file is saved, whether save the "-" tag to "-.tag" file,
	whether save the "+" tag to "+.tag" file

list_default_cursor = "$"
	When open notelist buffer, put the cursor to the last entry by default.
	The valid value is number, 1, 2, ... or "$", to the last entry.

max_mru_note_list = 10
	How many "mru" notes are saved.

--------------------------------------------------------+---------------------
5.2 Local remap schema					*vnote-remap*

It it hoped that the default settings and mappings is acceptable. However, for
the advanced user, if really want to change some mappings because of habit or
conflict or other reason, there also a full controled schema to do so.

The script in "plugin/" and "ftplugin/" subdirectory containing nearly only 
mappings and commands for use interface, that detailed in |vnote-interface|.
If you donnot care about future update matter, feel free to directly edit the
map you donnot like in place, those script is really simple.

A nearter way is ":saveas" a relation local script file, replace the ".vim" 
extention with ".local", in the same directory. Then when this plugin loaded,
your local script will be sourced, instead of the origin shipped script.

The trick is the command |PLUGINLOCAL| and |PLUGINAFTER| provided by |vimloo|.
So |vimloo| path must appear berfore |vnote| path in the 'runtimepath' list,
or in another way, install |vimloo| plugin before |vnote|.

When load a "*.vim" script begin with the command ":PLUGINLOCAL", except
comment header, it will try to source another script with the same name but
with ".local" extention, if such file found, the current script finish
immediately, otherswise the current script loads as normal.

When loading a "*.vim" script end with the command ":PLUGINAFTER", then it
will also try to source the same but "*.after" file.

In fact, the command ":PLUGINLOCAL" and ":PLUGINAFTER" can appear at any
position of a script. The different is that ":PLUGINCOCAL" may skip the
following part of that script.

For example 1. you can add more key maps to |vnote| as following way: >
	$ cd right/path/to/vnote/plugin
	$ vim vnote.after
	: nnoremap <leader>n :NoteNew<CR>
	: nnoremap <leader>d :NoteNew -<CR>
	: nnoremap <leader>D :NoteList -D<CR>
	: nnoremap <leader>T :NoteList -T<CR>
	:wq
<
That says create a "vnote.after" file, and input four maps in that file. It is
only a example, it is your term to select a <leader>, and descide whether
really needed and valuable.

For example 2. redefine key maps for notelist buffer completely: >
	$ cd right/path/to/vnote/ftplugin
	$ cp notelist.vim notelist.local
	$ vim notelist.local
	: g/^PLUGIN/delete
	: g/^" /delete
	" make other changes
<
That says make a copy of "notelist.vim" as "notelist.local", so to edit your
local script based on the shipped script. It is better to delete the
":PlUGINLOCAL" and ":PLUGINAFTER" command in the local sricpt, as there is no
need to check local script as itself. The comment can be deleted to make local
script shorter and compact. But commnet is allowed as any normal VimL script.

For example 3. disable the "markdown_eidt.vim" if you perfer to other markdown
plugin to avoid key map conflict: >
	$ cd right/path/to/vnote/ftplugin
	$ touch markdown_edit.local
<
That says create an empty file named "markdown_edit.local" to shield
"markdown_edit.vim". Of course you can add a dummy comment in that file to 
describe such purporse.

Attention: the "*.vim" files in "plugin/" and "ftplugin/" are automatically
loaded at some point. So to make better control of local script, it is
desgined not end with ".vim" extention. And when edit them in vim, they are
not detected as vim filetype, without syntax colour support and so on. If you
feel that trouble, ":set ft=vim" temporary. After all, the local script should
keep simple.

========================================================+=====================
6. Vnote command line tool				*vnote-tool*

|vnote-tool| is an external C++ program that run in shell command line interface.
It has migrated to a separated repository, that install as following: >
	$ git clone https://github.com/lymslive/vnote-tool
	$ cd right/path/to/vnote-tool
	$ cd src
	$ make
	$ make install
<
There is no need sudo permission to build it, and an executable "vnote" will 
be installed in "~/bin". It is assumed that the "~/bin" directory is 
already existed, and is contained in $PATH environment variable. If is not so,
mkdir it before make.

It is a simple command line tool, when with no argument or "-?", an usage
information will display to describe the valid options.  For example, 
to rebuild tagfiles: >
	$ vnote -d ~/notebook -ctQ
<
The old tagfiles in "~/notebook/t" will not be deleted, but overwrittened.

This C++ program is not necessary for basic use, but maybe useful when the 
notebook become large enough to slow down the pure VimL script. In current 
version, it's main purpose maybe to rebuild index files for a whole notebook.
In next version, it is planed to run as a background process to manage the
notebook or some hard work when necessary(not implemented yet).

As an example, in |vnote-tool| repository, a perl script is provided to
generate test notebook: >
	$ cd right/path/to/vnote-tool
	$ cd gen
	$ ./genbox.pl ~/notebook-test
<
It will generate notebook from 2000 to 2010 years, each day 10 notes, about
40180 notes overall. With the command |:NoteIndex|, it spends more than half
a minus, and using complied |vnote-tool|, spends several seconds.

========================================================+=====================
7. FAQ							*vnote-faq*

Q: Why markdown? Must learn markdown?
A: Well, markdown is a good choise. There is no need to create a new filetype
   and file extention. But there is no need to understand markdown to use write
   note. vnote only care the first line as title, and the `` quoted words as
   tags in the first few head lines.

Q: When note in date path yyyy/mm/dd, still name note file as yyyymmdd_*.md?
A: To make most other things simple, make filename itself have the full 
   information, denotes as a note ID in a notebook.

Q: What is private diary, any difference from note?
A: There is no much difference in substance, only suggestion mark label 
   concerning the content. Note is something can be shared, while diary is 
   other things don't share. Private is for away from secret or security, you
   may record the birthday of your girl friend in a diary, but do not record
   bank account with password.

========================================================+=====================
8. Credit						*vnote-credit*

https://github.com/tanakh/cmdline
A very light-weigth command line parser for C++.

https://github.com/Shougo/unite.vim
The famous vim plugin, a uinted frame to display and search information from
any source.

========================================================+=====================
vim:tw=78:ts=8:ft=help:norl:
